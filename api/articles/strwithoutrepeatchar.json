{"title":"无重复字符的最长子串","uid":"07c55e31248d72bce21e385abd54c291","slug":"strwithoutrepeatchar","date":"2015-04-20T07:44:37.000Z","updated":"2022-01-24T02:18:12.009Z","comments":true,"path":"api/articles/strwithoutrepeatchar.json","keywords":"博客","cover":null,"content":"<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1:\"></a>示例 1:</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;abcabcbb&quot;\n输出: 3 \n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2:\"></a>示例 2:</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例 3:\"></a>示例 3:</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例 4:\"></a>示例 4:</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;&quot;\n输出: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"方法一：滑动窗口\"><a href=\"#方法一：滑动窗口\" class=\"headerlink\" title=\"方法一：滑动窗口\"></a>方法一：滑动窗口</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p><h4 id=\"思路和算法\"><a href=\"#思路和算法\" class=\"headerlink\" title=\"思路和算法\"></a>思路和算法</h4><p>我们先用一个例子考虑如何在较优的时间复杂度内通过本题。</p>\n<p>我们不妨以示例一中的字符串 abcabcbb 为例，找出从每一个字符开始的，不包含重复字符的最长子串，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：</p>\n<ul>\n<li>以 <code>(a)bcabcbb</code> 开始的最长字符串为 <code>(abc)abcbb</code>;</li>\n<li>以 <code>a(b)cabcbb</code> 开始的最长字符串为 <code>a(bca)bcbb</code>;</li>\n<li>以 <code>ab(c)abcbb</code> 开始的最长字符串为 <code>ab(cab)cbb</code>;</li>\n<li>以 <code>abc(a)bcbb</code> 开始的最长字符串为 <code>abc(abc)bb</code>;</li>\n<li>以 <code>abca(b)cbb</code> 开始的最长字符串为 <code>abca(bc)bb</code>;</li>\n<li>以 <code>abcab(c)bb</code> 开始的最长字符串为 <code>abcab(cb)b</code>;</li>\n<li>以 <code>abcabc(b)b</code> 开始的最长字符串为 <code>abcabc(b)b</code>;</li>\n<li>以 <code>abcabcb(b)</code> 开始的最长字符串为 <code>abcabcb(b)</code>。</li>\n</ul>\n<p>发现了什么？如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第 <code>k</code> 个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 r<sub>k</sub>。那么当我们选择第 <code>k+1</code> 个字符作为起始位置时，首先从 <code>k+1</code> 到 r<sub>k</sub> 的字符显然是不重复的，并且由于少了原本的第 <code>k</code> 个字符，我们可以尝试继续增大 r<sub>k</sub>，直到右侧出现了重复字符为止。</p>\n<p>这样一来，我们就可以使用「滑动窗口」来解决这个问题了：</p>\n<p>我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的 r<sub>k</sub></p>\n<p>在每一步的操作中，我们会将左指针向右移动一格，表示 我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度;</p>\n<p>在枚举结束后，我们找到的最长的子串的长度即为答案。</p>\n<h4 id=\"判断重复字符\"><a href=\"#判断重复字符\" class=\"headerlink\" title=\"判断重复字符\"></a>判断重复字符</h4><p>在上面的流程中，我们还需要使用一种数据结构来判断 是否有重复的字符，常用的数据结构为哈希集合（即 <code>C++</code> 中的 <code>std::unordered_set</code>，<code>Java</code> 中的 <code>HashSet</code>，<code>Python</code> 中的 <code>set</code>， <code>JavaScript</code> 中的 <code>Set</code>）。在左指针向右移动的时候，我们从哈希集合中移除一个字符，在右指针向右移动的时候，我们往哈希集合中添加一个字符。</p>\n<p>至此，我们就完美解决了本题。</p>\n</div>\n<details class=\"custom-details\">\n<summary>Click to see code</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 哈希集合，记录每个字符是否出现过</span>\n    m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    n <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span>\n    rk<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">:=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 左指针向右移动一格，移除一个字符</span>\n            <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> rk <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>rk<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 不断地移动右指针</span>\n            m<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>rk<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n            rk<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> rk <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> y\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> x\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<h4 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><ul>\n<li>时间复杂度：O(N)，其中 N 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。</li>\n<li>空间复杂度：O(∣Σ∣)，其中 Σ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在 [0, 128) 内的字符，即∣Σ∣=128。我们需要用到哈希集合来存储出现过的字符，而字符最多有∣Σ∣ 个，因此空间复杂度为O(∣Σ∣)。</li>\n</ul>\n","feature":true,"text":"给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 示例 1:输入: s &#x3D; &quot;abcabcbb&quot; 输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。 示例 2:输入: s &#x3...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"algorithm","slug":"algorithm","count":3,"path":"api/categories/algorithm.json"}],"tags":[{"name":"哈希表","slug":"哈希表","count":2,"path":"api/tags/哈希表.json"},{"name":"字符串","slug":"字符串","count":1,"path":"api/tags/字符串.json"},{"name":"滑动窗口","slug":"滑动窗口","count":1,"path":"api/tags/滑动窗口.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">示例 1:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">示例 2:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-3\"><span class=\"toc-text\">示例 3:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-4\"><span class=\"toc-text\">示例 4:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">方法一：滑动窗口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%92%8C%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">思路和算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">判断重复字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">复杂度分析</span></a></li></ol>","author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"gomail基本用法","uid":"ea2df330bdc4d3b0275544f615da7198","slug":"gomail","date":"2019-03-11T03:50:45.000Z","updated":"2022-01-21T05:58:47.404Z","comments":true,"path":"api/articles/gomail.json","keywords":"博客","cover":null,"text":"GoMail基本用法 Click to see code // Example m := gomail.NewMessage() m.SetHeader(\"From\", \"alex@example.com\") m.SetHeader(\"To\", \"bob@example.com\"...","link":"","photos":[],"count_time":{"symbolsCount":833,"symbolsTime":"1 mins."},"categories":[{"name":"golang","slug":"golang","count":1,"path":"api/categories/golang.json"}],"tags":[{"name":"email","slug":"email","count":1,"path":"api/tags/email.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"两数相加","uid":"b612343628098f07bb289a1a081127cf","slug":"addtwonum","date":"2015-02-11T06:27:27.000Z","updated":"2022-01-21T08:58:22.157Z","comments":true,"path":"api/articles/addtwonum.json","keywords":"博客","cover":[],"text":"给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例 1： 输入：l1 &#x3D; [2,4,3]...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"algorithm","slug":"algorithm","count":3,"path":"api/categories/algorithm.json"}],"tags":[{"name":"递归","slug":"递归","count":1,"path":"api/tags/递归.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}