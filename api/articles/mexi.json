{"title":"MESI","uid":"1f00db9b04cf092490289d2bb1ca8cc3","slug":"mexi","date":"2016-07-15T08:37:06.000Z","updated":"2022-02-15T08:57:31.818Z","comments":true,"path":"api/articles/mexi.json","keywords":"博客","cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.77YbvroBAcLsK9MhvfAZwQAAAA?pid=ImgDet&rs=1","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>MESI（Modified Exclusive Shared Or Invalid）是一种广泛使用的支持写回策略的缓存一致性协议。</p>\n<h3 id=\"MESI协议中的状态\"><a href=\"#MESI协议中的状态\" class=\"headerlink\" title=\"MESI协议中的状态\"></a>MESI协议中的状态</h3><p>CPU中每个缓存行（caceh line)使用4种状态进行标记（使用额外的两位(bit)表示):</p>\n<h4 id=\"M-被修改（Modified\"><a href=\"#M-被修改（Modified\" class=\"headerlink\" title=\"M: 被修改（Modified)\"></a>M: 被修改（Modified)</h4><p>该缓存行只被缓存在该CPU的缓存中，并且是被修改过的,即与主存中的数据不一致，该缓存行中的内存需要在未来的某个时间点（允许其它CPU读取请主存中相应内存之前）写回（write back）主存。</p>\n<p>当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。</p>\n<h4 id=\"E-独享的（Exclusive\"><a href=\"#E-独享的（Exclusive\" class=\"headerlink\" title=\"E: 独享的（Exclusive)\"></a>E: 独享的（Exclusive)</h4><p>该缓存行只被缓存在该CPU的缓存中，它是未被修改过的，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。</p>\n<p>同样地，当CPU修改该缓存行中内容时，该状态可以变成Modified状态。</p>\n<h4 id=\"S-共享的（Shared\"><a href=\"#S-共享的（Shared\" class=\"headerlink\" title=\"S: 共享的（Shared)\"></a>S: 共享的（Shared)</h4><p>该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。</p>\n<h4 id=\"I-无效的（Invalid）\"><a href=\"#I-无效的（Invalid）\" class=\"headerlink\" title=\"I: 无效的（Invalid）\"></a>I: 无效的（Invalid）</h4><p>该缓存是无效的（可能有其它CPU修改了该缓存行）。</p>\n<p><img src=\"https://www.researchgate.net/profile/Caglar_Sayin3/publication/318860805/figure/download/fig7/AS:522938639630336@1501689695096/MESI-State-Diagram-for-processor-P1.png\" alt=\"avatar\"></p>\n","text":"概念MESI（Modified Exclusive Shared Or Invalid）是一种广泛使用的支持写回策略的缓存一致性协议。 MESI协议中的状态CPU中每个缓存行（caceh line)使用4种状态进行标记（使用额外的两位(bit)表示): M: 被修改（Modifi...","link":"","photos":[],"count_time":{"symbolsCount":550,"symbolsTime":"1 mins."},"categories":[{"name":"concurrency","slug":"concurrency","count":1,"path":"api/categories/concurrency.json"}],"tags":[{"name":"cpu缓存一致性协议","slug":"cpu缓存一致性协议","count":1,"path":"api/tags/cpu缓存一致性协议.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MESI%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">MESI协议中的状态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#M-%E8%A2%AB%E4%BF%AE%E6%94%B9%EF%BC%88Modified\"><span class=\"toc-text\">M: 被修改（Modified)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#E-%E7%8B%AC%E4%BA%AB%E7%9A%84%EF%BC%88Exclusive\"><span class=\"toc-text\">E: 独享的（Exclusive)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#S-%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%88Shared\"><span class=\"toc-text\">S: 共享的（Shared)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#I-%E6%97%A0%E6%95%88%E7%9A%84%EF%BC%88Invalid%EF%BC%89\"><span class=\"toc-text\">I: 无效的（Invalid）</span></a></li></ol></li></ol></li></ol>","author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"fetchall","uid":"74f85ec3f0b5983378594eef7eff81a2","slug":"fetchall","date":"2016-08-14T02:50:08.000Z","updated":"2022-02-14T03:14:40.903Z","comments":true,"path":"api/articles/fetchall.json","keywords":"博客","cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.-QEC7GzzKlQr8X9pKBpYTAHaEK?w=317&h=180&c=7&r=0&o=5&pid=1.7","text":"解析goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递。main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在这个新的goroutine中执行这个函数。 main函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"golang","slug":"golang","count":2,"path":"api/categories/golang.json"}],"tags":[{"name":"练习","slug":"练习","count":1,"path":"api/tags/练习.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"中国象棋将帅问题","uid":"a44366009025b68a7362d7c10070d68f","slug":"chinchess","date":"2015-09-21T09:11:25.000Z","updated":"2022-01-28T06:06:09.499Z","comments":true,"path":"api/articles/chinchess.json","keywords":"博客","cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.GYnEriElqrT6hFSCzHFIJgHaE7?w=232&h=180&c=7&r=0&o=5&pid=1.7","text":"下过中国象棋的朋友都知道，双方的“将”和“帅”相隔遥远，并且不能照面。在象棋残局中，许多高手能利用这一规则走出精妙的杀招。假设棋盘上只有“将”和“帅”二子（如图所示）（为了下面叙述方便，我们约定用A表示“将”, B表示“帅”）。A、B二子被限制在己方3×3的格子里运动。例如，在如...","link":"","photos":[],"count_time":{"symbolsCount":751,"symbolsTime":"1 mins."},"categories":[{"name":"algorithm","slug":"algorithm","count":5,"path":"api/categories/algorithm.json"}],"tags":[{"name":"趣题","slug":"趣题","count":3,"path":"api/tags/趣题.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}