{"title":"fetchall","uid":"74f85ec3f0b5983378594eef7eff81a2","slug":"fetchall","date":"2016-08-14T02:50:08.000Z","updated":"2022-02-14T03:14:40.903Z","comments":true,"path":"api/articles/fetchall.json","keywords":"博客","cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.-QEC7GzzKlQr8X9pKBpYTAHaEK?w=317&h=180&c=7&r=0&o=5&pid=1.7","content":"<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递。<br>main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在<br>这个新的goroutine中执行这个函数。</p>\n<p>main函数中用make函数创建了一个传递string类型参数的channel，对每一个命令行参数，我<br>们都用go这个关键字来创建一个goroutine，并且让函数在这个goroutine异步执行http.Get方<br>法。这个程序里的io.Copy会把响应的Body内容拷贝到ioutil.Discard输出流中，因为我们需要<br>这个方法返回的字节数，但是又不想要其内容。每当请求返回内容时，fetch函数都会往ch这个<br>channel里写入一个字符串，由main函数里的第二个for循环来处理并打印channel里的这个字符串。</p>\n<p>当一个goroutine尝试在一个channel上做send或者receive操作时，这个goroutine会阻塞在调<br>用处，直到另一个goroutine往这个channel里写入、或者接收值，这样两个goroutine才会继续<br>执行channel操作之后的逻辑。在这个例子中，每一个fetch函数在执行时都会往channel里发<br>送一个值(ch &lt;- expression)，主函数负责接收这些值(&lt;-ch)。这个程序中我们用main函数来接<br>收所有fetch函数传回的字符串，可以避免在goroutine异步执行还没有完成时main函数提前退<br>出。</p>\n<details class=\"custom-details\">\n<summary>Click to see code</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Copyright © 2016 Alan A. A. Donovan &amp; Brian W. Kernighan.</span>\n<span class=\"token comment\">// License: https://creativecommons.org/licenses/by-nc-sa/4.0/</span>\n\n<span class=\"token comment\">// See page 17.</span>\n<span class=\"token comment\">//!+</span>\n\n<span class=\"token comment\">// Fetchall fetches URLs in parallel and reports their times and sizes.</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tstart <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// start a goroutine</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// receive from channel ch</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2fs elapsed\\n\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ch <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tstart <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// send to channel ch</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tnbytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>ioutil<span class=\"token punctuation\">.</span>Discard<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't leak resources</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"while reading %s: %v\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tsecs <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2fs  %7d  %s\"</span><span class=\"token punctuation\">,</span> secs<span class=\"token punctuation\">,</span> nbytes<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n","text":"解析goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递。main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在这个新的goroutine中执行这个函数。 main函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"golang","slug":"golang","count":2,"path":"api/categories/golang.json"}],"tags":[{"name":"练习","slug":"练习","count":1,"path":"api/tags/练习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">解析</span></a></li></ol>","author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"快速找出故障机器","uid":"60ae5f459fdbd2a4d5acb3ac37fc6541","slug":"findbadmachine","date":"2016-09-26T03:33:26.000Z","updated":"2022-01-28T05:54:33.091Z","comments":true,"path":"api/articles/findbadmachine.json","keywords":"博客","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.cw_ZymcoFQL86v57DeTyvAHaEm?w=283&h=180&c=7&r=0&o=5&pid=1.7","text":"关心数据挖掘和搜索引擎的朋友都知道，我们需要很多的计算机来存储和处理海量数据。然而，计算机难免出现硬件故障而导致网络联系失败或死机。为了保证搜索引擎的服务质量，我们需要保证每份数据都有多个备份。 简单起见，我们假设一个机器仅储存一个标号为ID的记录（假设ID是小于10亿的整数），...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"algorithm","slug":"algorithm","count":5,"path":"api/categories/algorithm.json"}],"tags":[{"name":"趣题","slug":"趣题","count":3,"path":"api/tags/趣题.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MESI","uid":"1f00db9b04cf092490289d2bb1ca8cc3","slug":"mesi","date":"2016-07-15T08:37:06.000Z","updated":"2022-02-16T03:26:17.303Z","comments":true,"path":"api/articles/mesi.json","keywords":"博客","cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.77YbvroBAcLsK9MhvfAZwQAAAA?pid=ImgDet&rs=1","text":"概念MESI（Modified Exclusive Shared Or Invalid）是一种广泛使用的支持写回策略的缓存一致性协议。 MESI协议中的状态CPU中每个缓存行（caceh line)使用4种状态进行标记（使用额外的两位(bit)表示): M: 被修改（Modifi...","link":"","photos":[],"count_time":{"symbolsCount":550,"symbolsTime":"1 mins."},"categories":[{"name":"concurrency","slug":"concurrency","count":1,"path":"api/categories/concurrency.json"}],"tags":[{"name":"cpu缓存一致性协议","slug":"cpu缓存一致性协议","count":1,"path":"api/tags/cpu缓存一致性协议.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"当前目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}