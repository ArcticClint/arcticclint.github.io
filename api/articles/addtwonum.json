{"title":"两数相加","uid":"b612343628098f07bb289a1a081127cf","slug":"addtwonum","date":"2015-02-11T06:27:27.000Z","updated":"2022-01-21T07:03:12.155Z","comments":true,"path":"api/articles/addtwonum.json","keywords":"博客","cover":[],"content":"<p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"avatar\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 &#x3D; 807.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [0], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"方法一-模拟\"><a href=\"#方法一-模拟\" class=\"headerlink\" title=\"方法一: 模拟\"></a>方法一: 模拟</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>思路与算法:</p>\n<p>由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。</p>\n<p>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，如果当前两个链表处相应位置的数字为 <code>n1,n2</code>，进位值为 carry，则它们的和为 <code>n1+n2+carry</code>; 其中，答案链表处相应位置的数字为 <code>(n1+n2+carry) mod 10</code>, 而新的进位值为 <code>n1+n2+carry/10</code></p>\n<p>如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 0 。</p>\n<p>此外，如果链表遍历结束后，有 carry &gt; 0，还需要在答案链表的后面附加一个节点，节点的值为 carry。</p>\n</div>\n<details class=\"custom-details\">\n<summary>Click to see code</summary>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">*</span>ListNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> tail <span class=\"token operator\">*</span>ListNode\n    carry <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> l1 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        n1<span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> l1 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n            n1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>Val\n            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>Next\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> l2 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n            n2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>Val\n            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>Next\n        <span class=\"token punctuation\">&#125;</span>\n        sum <span class=\"token operator\">:=</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> carry\n        sum<span class=\"token punctuation\">,</span> carry <span class=\"token operator\">=</span> sum<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> sum<span class=\"token operator\">/</span><span class=\"token number\">10</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">&#123;</span>Val<span class=\"token punctuation\">:</span> sum<span class=\"token punctuation\">&#125;</span>\n            tail <span class=\"token operator\">=</span> head\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            tail<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">&#123;</span>Val<span class=\"token punctuation\">:</span> sum<span class=\"token punctuation\">&#125;</span>\n            tail <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span>Next\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> carry <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n        tail<span class=\"token punctuation\">.</span>Next <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ListNode<span class=\"token punctuation\">&#123;</span>Val<span class=\"token punctuation\">:</span> carry<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n<p>复杂度分析</p>\n<ul>\n<li>时间复杂度：O(max(m,n))，其中 m 和 n 分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要 O(1) 的时间。</li>\n<li>空间复杂度：O(1)。注意返回值不计入空间复杂度。</li>\n</ul>\n","feature":true,"text":"给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储一位数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例 1： 输入：l1 &#x3D; [2,4,3]...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"algorithm","slug":"algorithm","count":2,"path":"api/categories/algorithm.json"}],"tags":[{"name":"递归","slug":"递归","count":1,"path":"api/tags/递归.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1%EF%BC%9A\"><span class=\"toc-text\">示例 1：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2%EF%BC%9A\"><span class=\"toc-text\">示例 2：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-3%EF%BC%9A\"><span class=\"toc-text\">示例 3：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80-%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">方法一: 模拟</span></a>","author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"gomail基本用法","uid":"ea2df330bdc4d3b0275544f615da7198","slug":"gomail","date":"2019-03-11T03:50:45.000Z","updated":"2022-01-21T05:58:47.404Z","comments":true,"path":"api/articles/gomail.json","keywords":"博客","cover":null,"text":"GoMail基本用法 Click to see code // Example m := gomail.NewMessage() m.SetHeader(\"From\", \"alex@example.com\") m.SetHeader(\"To\", \"bob@example.com\"...","link":"","photos":[],"count_time":{"symbolsCount":833,"symbolsTime":"1 mins."},"categories":[{"name":"golang","slug":"golang","count":1,"path":"api/categories/golang.json"}],"tags":[{"name":"email","slug":"email","count":1,"path":"api/tags/email.json"}],"author":{"name":"ArcticTime","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/22902414?s=400&u=5ba620686e56ccff3fba9fffaadb3244bdc6de4d&v=4","link":"/","description":"目标是八块腹肌","socials":{"github":"https://github.com/ArcticClint","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}